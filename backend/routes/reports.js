const express=require('express');const Report=require('../models/Report');const { auth }=require('../middleware/auth');const upload=require('../middleware/upload');const r=express.Router();
r.post('/', auth, upload.single('image'), async (req,res)=>{ try{ const {title,description,lat,lng}=req.body; const imagePath = req.file?('/'+(process.env.UPLOAD_DIR||'uploads')+'/'+req.file.filename):null; const rep=new Report({title,description,imagePath,user:req.user._id,location:{type:'Point',coordinates:[parseFloat(lng||0),parseFloat(lat||0)]}}); await rep.save(); res.json(rep);}catch(e){console.error(e);res.status(500).json({error:'err'})}});
r.get('/', async (req,res)=>{ try{ const {near,radius,page=1,limit=50}=req.query; let query=Report.find().sort({createdAt:-1}); if(near){ const [lat,lng]=near.split(',').map(Number); const rmeters=(parseFloat(radius||5))*1000; query=Report.find({location:{ $near: { $geometry:{type:'Point',coordinates:[lng,lat]}, $maxDistance:rmeters } }}); } const results=await query.skip((page-1)*limit).limit(parseInt(limit)).exec(); res.json(results);}catch(e){console.error(e);res.status(500).json({error:'err'})}});
r.get('/:id', async (req,res)=>{ try{ const rep=await Report.findById(req.params.id).populate('user','name email'); if(!rep) return res.status(404).json({error:'Not found'}); res.json(rep);}catch(e){console.error(e);res.status(500).json({error:'err'})}});
module.exports=r;
