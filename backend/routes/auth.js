const express=require('express');const bcrypt=require('bcryptjs');const jwt=require('jsonwebtoken');const User=require('../models/User');const r=express.Router();
r.post('/signup',async(req,res)=>{try{const{email,password,name}=req.body;if(!email||!password||!name) return res.status(400).json({error:'Missing'}); if(await User.findOne({email})) return res.status(400).json({error:'Exists'}); const hash=await bcrypt.hash(password,10); const u=new User({name,email,passwordHash:hash}); await u.save(); const token=jwt.sign({id:u._id},process.env.JWT_SECRET||'secret',{expiresIn:process.env.TOKEN_EXPIRES_IN||'7d'}); res.json({token,user:{id:u._id,name:u.name,email:u.email}});}catch(e){console.error(e);res.status(500).json({error:'err'})}});
r.post('/login',async(req,res)=>{try{const{email,password}=req.body;const u=await User.findOne({email}); if(!u) return res.status(400).json({error:'Invalid'}); const ok=await u.verifyPassword(password); if(!ok) return res.status(400).json({error:'Invalid'}); const token=jwt.sign({id:u._id},process.env.JWT_SECRET||'secret',{expiresIn:process.env.TOKEN_EXPIRES_IN||'7d'}); res.json({token,user:{id:u._id,name:u.name,email:u.email}});}catch(e){console.error(e);res.status(500).json({error:'err'})}});
module.exports=r;
